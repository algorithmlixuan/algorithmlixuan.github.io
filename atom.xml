<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>____查无此人〆</title>
  
  <subtitle>大隐隐于市</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-06T12:33:58.032Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李萱</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++ Lession 4：内联函数，函数重载，函数缺省参数</title>
    <link href="http://yoursite.com/2018/10/06/c++lession4/"/>
    <id>http://yoursite.com/2018/10/06/c++lession4/</id>
    <published>2018-10-06T12:33:58.032Z</published>
    <updated>2018-10-06T12:33:58.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、内联函数"><a href="#一、内联函数" class="headerlink" title="一、内联函数"></a>一、内联函数</h2><blockquote><p>前言：函数调用是有时间开销的，如果函数本身只有几行代码，而且执行很快，那么相比下调用函数所产生的这个开销就会显得比较大。</p></blockquote><p>为了减少函数调用的开销，就引入<font color="#FF4500">内联函数</font>机制。编译器处理对内联函数的调用语句，是将整个函数的代码插入到调用语句处，而不会产生调用语句。<br>举个栗子：</p><p><img src="/image/lession4.png" alt=""></p><p>但内联函数也是有缺点的，以下列出了内联函数的优缺点：</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1. 内联函数代码被放入符号表中，在使用时进行替换，和宏展开一样，效率很高</td><td>1. 不允许过多的代码，代码过多的话会造成大的内存消耗，最好在5行以内</td></tr><tr><td>2. 编绎器在调用一个内联函数，首先会检查参数问题，保证调用正确，与对待普通的函数一样，消除了隐患及局限性</td><td>2. 不允许有循环或者开关语句，如果有的话，执行函数代码时间比调用开销大</td></tr><tr><td>3.与其它函数一样，可以使用所在类的保护成员及私有成员</td><td>(没找到Markdown怎么插入空表格，嘻嘻)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、内联函数&quot;&gt;&lt;a href=&quot;#一、内联函数&quot; class=&quot;headerlink&quot; title=&quot;一、内联函数&quot;&gt;&lt;/a&gt;一、内联函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前言：函数调用是有时间开销的，如果函数本身只有几行代码，而且执行很快，那么相比下调
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c++ Lesson 3：动态内存分配</title>
    <link href="http://yoursite.com/2018/10/05/c++lesson3/"/>
    <id>http://yoursite.com/2018/10/05/c++lesson3/</id>
    <published>2018-10-05T04:24:04.149Z</published>
    <updated>2018-10-05T04:24:04.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、用new运算符实现动态内存分配"><a href="#一、用new运算符实现动态内存分配" class="headerlink" title="一、用new运算符实现动态内存分配"></a>一、用new运算符实现动态内存分配</h2><p>第一种用法，分配一个变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P = <span class="keyword">new</span> T;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *T是任意类型名，P是类型为T*的指针</span></span><br><span class="line"><span class="comment"> *动态分配出一片大小为sizeof(T)字节的内存空间</span></span><br><span class="line"><span class="comment"> *并将改内存的起始地址赋值给P</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>举一个具体的栗子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">*p = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>第二种用法，分配一个数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * T :任意类型名</span></span><br><span class="line"><span class="comment"> * P :类型为T*的指针</span></span><br><span class="line"><span class="comment"> * N :要分配的数组元素的个数，可以是整型表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">P = <span class="keyword">new</span> T[N];</span><br><span class="line"><span class="comment">//动态分配出一片sizeof(T)*N字节的内存空间</span></span><br><span class="line"><span class="comment">//并且内存空间的起始地址赋值给P。</span></span><br></pre></td></tr></table></figure><p>动态分配数组实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pn;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">pn = <span class="keyword">new</span> <span class="keyword">int</span>[i*<span class="number">50</span>];</span><br><span class="line">pn[<span class="number">0</span>] = <span class="number">520</span>;  <span class="comment">//ok</span></span><br><span class="line">pn[<span class="number">100</span>] = <span class="number">1314</span>;  <span class="comment">//编译没问题，运行时数组越界</span></span><br></pre></td></tr></table></figure><h2 id="二、用delete运算符释放动态分配内存"><a href="#二、用delete运算符释放动态分配内存" class="headerlink" title="二、用delete运算符释放动态分配内存"></a>二、用delete运算符释放动态分配内存</h2><p>注意：用new动态分配的内存空间，一定要用delete运算符释放，否则会产生内存垃圾，这样会被资深程序猿diss的嘻嘻，而且不能delete多次会导致异常。<br>举个栗子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">*p = <span class="number">520</span>;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> p;  <span class="comment">//多次delete同一片空间会产生异常</span></span><br></pre></td></tr></table></figure><p>用delete释放动态分配的数组，要加”[]”<br>举个栗子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、用new运算符实现动态内存分配&quot;&gt;&lt;a href=&quot;#一、用new运算符实现动态内存分配&quot; class=&quot;headerlink&quot; title=&quot;一、用new运算符实现动态内存分配&quot;&gt;&lt;/a&gt;一、用new运算符实现动态内存分配&lt;/h2&gt;&lt;p&gt;第一种用法，分配一个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c++ Lesson 2：const 关键字的用法</title>
    <link href="http://yoursite.com/2018/10/03/c++lesson2/"/>
    <id>http://yoursite.com/2018/10/03/c++lesson2/</id>
    <published>2018-10-03T12:41:16.898Z</published>
    <updated>2018-10-03T12:41:16.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、定义常量"><a href="#一、定义常量" class="headerlink" title="一、定义常量"></a>一、定义常量</h2><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_VAL = <span class="number">520</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> SCHOOL_NAME = <span class="string">"HIT"</span>;</span><br></pre></td></tr></table></figure><h2 id="二、定义常量指针"><a href="#二、定义常量指针" class="headerlink" title="二、定义常量指针"></a>二、定义常量指针</h2><p>注意：不可通过常量指针修改其指向的内容<br>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;n;</span><br><span class="line">*p = <span class="number">5</span>;  <span class="comment">//报错</span></span><br><span class="line">n = <span class="number">1314</span>;  <span class="comment">//正确</span></span><br><span class="line">p = &amp;m;  <span class="comment">//ok，常量指针的指向可以变化</span></span><br></pre></td></tr></table></figure><p>注意：不能把常量指针赋值给非常量指针，反过来可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> *q;</span><br><span class="line">p = q;  <span class="comment">//ok</span></span><br><span class="line">q = p;  <span class="comment">//报错</span></span><br><span class="line">q = (<span class="keyword">int</span> *) p;  <span class="comment">//强转ok</span></span><br></pre></td></tr></table></figure><p>函数参数为指针时，可以防止函数内部不小心修改参数指针所指地方的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *p = <span class="number">3</span>;  <span class="comment">//报错</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,*p);  <span class="comment">//ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、常引用"><a href="#三、常引用" class="headerlink" title="三、常引用"></a>三、常引用</h2><p>此部分参照Lesson 1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、定义常量&quot;&gt;&lt;a href=&quot;#一、定义常量&quot; class=&quot;headerlink&quot; title=&quot;一、定义常量&quot;&gt;&lt;/a&gt;一、定义常量&lt;/h2&gt;&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c++ Lesson 1：引用</title>
    <link href="http://yoursite.com/2018/10/03/c++lesson1/"/>
    <id>http://yoursite.com/2018/10/03/c++lesson1/</id>
    <published>2018-10-03T03:26:44.210Z</published>
    <updated>2018-10-03T03:26:44.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、引用的概念"><a href="#一、引用的概念" class="headerlink" title="一、引用的概念"></a>一、引用的概念</h2><p>形式：类型名 &amp; 引用名 = 某变量名;<br>注意：定义某个引用时一定要将其<strong>初始化</strong>为某个引用变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">520</span>;</span><br><span class="line"><span class="keyword">int</span> &amp; r = n;</span><br></pre></td></tr></table></figure><p>某个变量的引用，等价于这个变量相当于这个变量的别名</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int n = <span class="number">520</span>;</span><br><span class="line">int <span class="meta">&amp; r = n;</span></span><br><span class="line">cout &lt;&lt; r;  <span class="comment">//输出 520</span></span><br><span class="line">cout &lt;&lt; n;  </span><br><span class="line">n = <span class="number">1314</span>;</span><br><span class="line">cout &lt;&lt; r;  <span class="comment">//输出 1314</span></span><br></pre></td></tr></table></figure><h2 id="二、引用的应用"><a href="#二、引用的应用" class="headerlink" title="二、引用的应用"></a>二、引用的应用</h2><p>在某些情况下可以替代指针, 省去了一些指针的烦恼<br>例：两数交换<br>C语言：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = *a; *a = *b; *b =tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n1, n2;</span><br><span class="line">swap(&amp;n1,&amp;n2);</span><br></pre></td></tr></table></figure></p><p>C++:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a; a = b; b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n1, n2;</span><br><span class="line">swap(n1,n2);</span><br></pre></td></tr></table></figure></p><p>引用作为函数的返回值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">520</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">SetValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SetValue() = <span class="number">1314</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n;  <span class="comment">//输出 1314;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、常引用"><a href="#三、常引用" class="headerlink" title="三、常引用"></a>三、常引用</h2><p>不能通过常引用来修改其引用内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">520</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = n;</span><br><span class="line">r = <span class="number">1314</span>;  <span class="comment">//报错</span></span><br><span class="line">n = <span class="number">521</span>;   <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p>注意：const T 类型的常变量和const T &amp; 类型的引用则不能用于初始化T &amp; 类型的引用，因为如果修改了T &amp; 类型的引用则常变量或者常引用也会修改，这样会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、引用的概念&quot;&gt;&lt;a href=&quot;#一、引用的概念&quot; class=&quot;headerlink&quot; title=&quot;一、引用的概念&quot;&gt;&lt;/a&gt;一、引用的概念&lt;/h2&gt;&lt;p&gt;形式：类型名 &amp;amp; 引用名 = 某变量名;&lt;br&gt;注意：定义某个引用时一定要将其&lt;strong
      
    
    </summary>
    
    
  </entry>
  
</feed>
